{
  "version": 3,
  "sources": ["../../../bin/live-reload.js", "../../../node_modules/@firebase/util/src/constants.ts", "../../../node_modules/@firebase/util/src/assert.ts", "../../../node_modules/@firebase/util/src/crypt.ts", "../../../node_modules/@firebase/util/src/deepCopy.ts", "../../../node_modules/@firebase/util/src/global.ts", "../../../node_modules/@firebase/util/src/defaults.ts", "../../../node_modules/@firebase/util/src/deferred.ts", "../../../node_modules/@firebase/util/src/emulator.ts", "../../../node_modules/@firebase/util/src/environment.ts", "../../../node_modules/@firebase/util/src/errors.ts", "../../../node_modules/@firebase/util/src/json.ts", "../../../node_modules/@firebase/util/src/jwt.ts", "../../../node_modules/@firebase/util/src/obj.ts", "../../../node_modules/@firebase/util/src/promise.ts", "../../../node_modules/@firebase/util/src/query.ts", "../../../node_modules/@firebase/util/src/sha1.ts", "../../../node_modules/@firebase/util/src/subscribe.ts", "../../../node_modules/@firebase/util/src/validation.ts", "../../../node_modules/@firebase/util/src/utf8.ts", "../../../node_modules/@firebase/util/src/exponential_backoff.ts", "../../../node_modules/@firebase/util/src/formatters.ts", "../../../node_modules/@firebase/util/src/compat.ts", "../../../node_modules/@firebase/component/src/component.ts", "../../../node_modules/@firebase/component/src/constants.ts", "../../../node_modules/@firebase/component/src/provider.ts", "../../../node_modules/@firebase/component/src/component_container.ts", "../../../node_modules/@firebase/logger/src/logger.ts", "../../../node_modules/idb/build/wrap-idb-value.js", "../../../node_modules/idb/build/index.js", "../../../node_modules/@firebase/app/src/platformLoggerService.ts", "../../../node_modules/@firebase/app/src/logger.ts", "../../../node_modules/@firebase/app/src/constants.ts", "../../../node_modules/@firebase/app/src/internal.ts", "../../../node_modules/@firebase/app/src/errors.ts", "../../../node_modules/@firebase/app/src/firebaseApp.ts", "../../../node_modules/@firebase/app/src/firebaseServerApp.ts", "../../../node_modules/@firebase/app/src/api.ts", "../../../node_modules/@firebase/app/src/indexeddb.ts", "../../../node_modules/@firebase/app/src/heartbeatService.ts", "../../../node_modules/@firebase/app/src/registerCoreComponents.ts", "../../../node_modules/@firebase/app/src/index.ts", "../../../node_modules/firebase/app/index.ts", "../../../node_modules/@firebase/database/src/core/version.ts", "../../../node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts", "../../../node_modules/@firebase/database/src/core/storage/MemoryStorage.ts", "../../../node_modules/@firebase/database/src/core/storage/storage.ts", "../../../node_modules/@firebase/database/src/core/util/util.ts", "../../../node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts", "../../../node_modules/@firebase/database/src/core/AuthTokenProvider.ts", "../../../node_modules/@firebase/database/src/realtime/Constants.ts", "../../../node_modules/@firebase/database/src/core/RepoInfo.ts", "../../../node_modules/@firebase/database/src/core/stats/StatsCollection.ts", "../../../node_modules/@firebase/database/src/core/stats/StatsManager.ts", "../../../node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts", "../../../node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts", "../../../node_modules/@firebase/database/src/realtime/WebSocketConnection.ts", "../../../node_modules/@firebase/database/src/realtime/TransportManager.ts", "../../../node_modules/@firebase/database/src/realtime/Connection.ts", "../../../node_modules/@firebase/database/src/core/ServerActions.ts", "../../../node_modules/@firebase/database/src/core/util/EventEmitter.ts", "../../../node_modules/@firebase/database/src/core/util/OnlineMonitor.ts", "../../../node_modules/@firebase/database/src/core/util/Path.ts", "../../../node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts", "../../../node_modules/@firebase/database/src/core/PersistentConnection.ts", "../../../node_modules/@firebase/database/src/core/snap/Node.ts", "../../../node_modules/@firebase/database/src/core/snap/indexes/Index.ts", "../../../node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts", "../../../node_modules/@firebase/database/src/core/util/SortedMap.ts", "../../../node_modules/@firebase/database/src/core/snap/comparators.ts", "../../../node_modules/@firebase/database/src/core/snap/snap.ts", "../../../node_modules/@firebase/database/src/core/snap/LeafNode.ts", "../../../node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts", "../../../node_modules/@firebase/database/src/core/snap/childSet.ts", "../../../node_modules/@firebase/database/src/core/snap/IndexMap.ts", "../../../node_modules/@firebase/database/src/core/snap/ChildrenNode.ts", "../../../node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts", "../../../node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts", "../../../node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts", "../../../node_modules/@firebase/database/src/core/view/Change.ts", "../../../node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts", "../../../node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts", "../../../node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts", "../../../node_modules/@firebase/database/src/core/view/QueryParams.ts", "../../../node_modules/@firebase/database/src/core/ReadonlyRestClient.ts", "../../../node_modules/@firebase/database/src/core/SnapshotHolder.ts", "../../../node_modules/@firebase/database/src/core/SparseSnapshotTree.ts", "../../../node_modules/@firebase/database/src/core/stats/StatsListener.ts", "../../../node_modules/@firebase/database/src/core/stats/StatsReporter.ts", "../../../node_modules/@firebase/database/src/core/operation/Operation.ts", "../../../node_modules/@firebase/database/src/core/operation/AckUserWrite.ts", "../../../node_modules/@firebase/database/src/core/operation/ListenComplete.ts", "../../../node_modules/@firebase/database/src/core/operation/Overwrite.ts", "../../../node_modules/@firebase/database/src/core/operation/Merge.ts", "../../../node_modules/@firebase/database/src/core/view/CacheNode.ts", "../../../node_modules/@firebase/database/src/core/view/EventGenerator.ts", "../../../node_modules/@firebase/database/src/core/view/ViewCache.ts", "../../../node_modules/@firebase/database/src/core/util/ImmutableTree.ts", "../../../node_modules/@firebase/database/src/core/CompoundWrite.ts", "../../../node_modules/@firebase/database/src/core/WriteTree.ts", "../../../node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts", "../../../node_modules/@firebase/database/src/core/view/CompleteChildSource.ts", "../../../node_modules/@firebase/database/src/core/view/ViewProcessor.ts", "../../../node_modules/@firebase/database/src/core/view/View.ts", "../../../node_modules/@firebase/database/src/core/SyncPoint.ts", "../../../node_modules/@firebase/database/src/core/SyncTree.ts", "../../../node_modules/@firebase/database/src/core/util/ServerValues.ts", "../../../node_modules/@firebase/database/src/core/util/Tree.ts", "../../../node_modules/@firebase/database/src/core/util/validation.ts", "../../../node_modules/@firebase/database/src/core/view/EventQueue.ts", "../../../node_modules/@firebase/database/src/core/Repo.ts", "../../../node_modules/@firebase/database/src/core/util/libs/parser.ts", "../../../node_modules/@firebase/database/src/core/util/NextPushId.ts", "../../../node_modules/@firebase/database/src/core/view/Event.ts", "../../../node_modules/@firebase/database/src/core/view/EventRegistration.ts", "../../../node_modules/@firebase/database/src/api/OnDisconnect.ts", "../../../node_modules/@firebase/database/src/api/Reference_impl.ts", "../../../node_modules/@firebase/database/src/api/Database.ts", "../../../node_modules/@firebase/database/src/register.ts", "../../../node_modules/@firebase/database/src/api/ServerValue.ts", "../../../node_modules/@firebase/database/src/api/Transaction.ts", "../../../node_modules/@firebase/database/src/api/test_access.ts", "../../../node_modules/@firebase/database/src/internal/index.ts", "../../../node_modules/@firebase/database/src/index.ts", "../../../src/utils/firebase/firebaseConfig.ts", "../../../src/utils/firebase/getEntries.ts", "../../../src/utils/firebase/postEntries.ts", "../../../src/utils/firebase/testFirebase.ts"],
  "sourcesContent": ["new EventSource(`http://localhost:${SERVE_PORT}/esbuild`).addEventListener('change', () =>\r\n  location.reload()\r\n);\r\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\n// TODO(dlarocque): Define this as a class, since we no longer target ES5.\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw new DecodeBase64StringError();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * An error encountered while decoding base64 string.\n */\nexport class DecodeBase64StringError extends Error {\n  readonly name = 'DecodeBase64StringError';\n}\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './global';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  /**\n   * Override Firebase's runtime environment detection and\n   * force the SDK to act as if it were in the specified environment.\n   */\n  forceEnvironment?: 'browser' | 'node';\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nexport const getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\nimport { getDefaults } from './defaults';\n\n/**\n * Type placeholder for `WorkerGlobalScope` from `webworker`\n */\ndeclare class WorkerGlobalScope {}\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') {\n    return true;\n  } else if (forceEnvironment === 'browser') {\n    return false;\n  }\n\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment.\n * Note: This will return true for certain test frameworks that are incompletely\n * mimicking a browser, and should not lead to assuming all browser APIs are\n * available.\n */\nexport function isBrowser(): boolean {\n  return typeof window !== 'undefined' || isWebWorker();\n}\n\n/**\n * Detect Web Worker context.\n */\nexport function isWebWorker(): boolean {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    typeof self !== 'undefined' &&\n    self instanceof WorkerGlobalScope\n  );\n}\n\n/**\n * Detect Cloudflare Worker context.\n */\nexport function isCloudflareWorker(): boolean {\n  return (\n    typeof navigator !== 'undefined' &&\n    navigator.userAgent === 'Cloudflare-Workers'\n  );\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    !!navigator.userAgent &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  try {\n    return typeof indexedDB === 'object';\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // TypeScript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // TODO(dlarocque): Replace this with `new.target`: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget\n    //                   which we can now use since we no longer target ES5.\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data JavaScript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './deferred';\n\n/**\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\n * @internal\n */\nexport function promiseWithTimeout<T>(\n  promise: Promise<T>,\n  timeInMS = 2000\n): Promise<T> {\n  const deferredPromise = new Deferred<T>();\n  setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\n  promise.then(deferredPromise.resolve, deferredPromise.reject);\n  return deferredPromise.promise;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\nexport interface Observer<T> {\n  // Called once for each value in a stream of values.\n  next: NextFn<T>;\n\n  // A stream terminates by a single call to EITHER error() or complete().\n  error: ErrorFn;\n\n  // No events will be sent to next() once complete() is called.\n  complete: CompleteFn;\n}\n\nexport type PartialObserver<T> = Partial<Observer<T>>;\n\n// TODO: Support also Unsubscribe.unsubscribe?\nexport type Unsubscribe = () => void;\n\n/**\n * The Subscribe interface has two forms - passing the inline function\n * callbacks, or a object interface with callback properties.\n */\nexport interface Subscribe<T> {\n  (next?: NextFn<T>, error?: ErrorFn, complete?: CompleteFn): Unsubscribe;\n  (observer: PartialObserver<T>): Unsubscribe;\n}\n\nexport interface Observable<T> {\n  // Subscribe method\n  subscribe: Subscribe<T>;\n}\n\nexport type Executor<T> = (observer: Observer<T>) => void;\n\n/**\n * Helper to make a Subscribe function (just like Promise helps make a\n * Thenable).\n *\n * @param executor Function which can make calls to a single Observer\n *     as a proxy.\n * @param onNoObservers Callback when count of Observers goes to zero.\n */\nexport function createSubscribe<T>(\n  executor: Executor<T>,\n  onNoObservers?: Executor<T>\n): Subscribe<T> {\n  const proxy = new ObserverProxy<T>(executor, onNoObservers);\n  return proxy.subscribe.bind(proxy);\n}\n\n/**\n * Implement fan-out for any number of Observers attached via a subscribe\n * function.\n */\nclass ObserverProxy<T> implements Observer<T> {\n  private observers: Array<Observer<T>> | undefined = [];\n  private unsubscribes: Unsubscribe[] = [];\n  private onNoObservers: Executor<T> | undefined;\n  private observerCount = 0;\n  // Micro-task scheduling by calling task.then().\n  private task = Promise.resolve();\n  private finalized = false;\n  private finalError?: Error;\n\n  /**\n   * @param executor Function which can make calls to a single Observer\n   *     as a proxy.\n   * @param onNoObservers Callback when count of Observers goes to zero.\n   */\n  constructor(executor: Executor<T>, onNoObservers?: Executor<T>) {\n    this.onNoObservers = onNoObservers;\n    // Call the executor asynchronously so subscribers that are called\n    // synchronously after the creation of the subscribe function\n    // can still receive the very first value generated in the executor.\n    this.task\n      .then(() => {\n        executor(this);\n      })\n      .catch(e => {\n        this.error(e);\n      });\n  }\n\n  next(value: T): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.next(value);\n    });\n  }\n\n  error(error: Error): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.error(error);\n    });\n    this.close(error);\n  }\n\n  complete(): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.complete();\n    });\n    this.close();\n  }\n\n  /**\n   * Subscribe function that can be used to add an Observer to the fan-out list.\n   *\n   * - We require that no event is sent to a subscriber synchronously to their\n   *   call to subscribe().\n   */\n  subscribe(\n    nextOrObserver?: NextFn<T> | PartialObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ): Unsubscribe {\n    let observer: Observer<T>;\n\n    if (\n      nextOrObserver === undefined &&\n      error === undefined &&\n      complete === undefined\n    ) {\n      throw new Error('Missing Observer.');\n    }\n\n    // Assemble an Observer object when passed as callback functions.\n    if (\n      implementsAnyMethods(nextOrObserver as { [key: string]: unknown }, [\n        'next',\n        'error',\n        'complete'\n      ])\n    ) {\n      observer = nextOrObserver as Observer<T>;\n    } else {\n      observer = {\n        next: nextOrObserver as NextFn<T>,\n        error,\n        complete\n      } as Observer<T>;\n    }\n\n    if (observer.next === undefined) {\n      observer.next = noop as NextFn<T>;\n    }\n    if (observer.error === undefined) {\n      observer.error = noop as ErrorFn;\n    }\n    if (observer.complete === undefined) {\n      observer.complete = noop as CompleteFn;\n    }\n\n    const unsub = this.unsubscribeOne.bind(this, this.observers!.length);\n\n    // Attempt to subscribe to a terminated Observable - we\n    // just respond to the Observer with the final error or complete\n    // event.\n    if (this.finalized) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.task.then(() => {\n        try {\n          if (this.finalError) {\n            observer.error(this.finalError);\n          } else {\n            observer.complete();\n          }\n        } catch (e) {\n          // nothing\n        }\n        return;\n      });\n    }\n\n    this.observers!.push(observer as Observer<T>);\n\n    return unsub;\n  }\n\n  // Unsubscribe is synchronous - we guarantee that no events are sent to\n  // any unsubscribed Observer.\n  private unsubscribeOne(i: number): void {\n    if (this.observers === undefined || this.observers[i] === undefined) {\n      return;\n    }\n\n    delete this.observers[i];\n\n    this.observerCount -= 1;\n    if (this.observerCount === 0 && this.onNoObservers !== undefined) {\n      this.onNoObservers(this);\n    }\n  }\n\n  private forEachObserver(fn: (observer: Observer<T>) => void): void {\n    if (this.finalized) {\n      // Already closed by previous event....just eat the additional values.\n      return;\n    }\n\n    // Since sendOne calls asynchronously - there is no chance that\n    // this.observers will become undefined.\n    for (let i = 0; i < this.observers!.length; i++) {\n      this.sendOne(i, fn);\n    }\n  }\n\n  // Call the Observer via one of it's callback function. We are careful to\n  // confirm that the observe has not been unsubscribed since this asynchronous\n  // function had been queued.\n  private sendOne(i: number, fn: (observer: Observer<T>) => void): void {\n    // Execute the callback asynchronously\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      if (this.observers !== undefined && this.observers[i] !== undefined) {\n        try {\n          fn(this.observers[i]);\n        } catch (e) {\n          // Ignore exceptions raised in Observers or missing methods of an\n          // Observer.\n          // Log error to console. b/31404806\n          if (typeof console !== 'undefined' && console.error) {\n            console.error(e);\n          }\n        }\n      }\n    });\n  }\n\n  private close(err?: Error): void {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    if (err !== undefined) {\n      this.finalError = err;\n    }\n    // Proxy is no longer needed - garbage collect references\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      this.observers = undefined;\n      this.onNoObservers = undefined;\n    });\n  }\n}\n\n/** Turn synchronous function into one called asynchronously. */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(fn: Function, onError?: ErrorFn): Function {\n  return (...args: unknown[]) => {\n    Promise.resolve(true)\n      .then(() => {\n        fn(...args);\n      })\n      .catch((error: Error) => {\n        if (onError) {\n          onError(error);\n        }\n      });\n  };\n}\n\n/**\n * Return true if the object passed in implements any of the named methods.\n */\nfunction implementsAnyMethods(\n  obj: { [key: string]: unknown },\n  methods: string[]\n): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  for (const method of methods) {\n    if (method in obj && typeof obj[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction noop(): void {\n  // do nothing\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in JavaScript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The amount of milliseconds to exponentially increase.\n */\nconst DEFAULT_INTERVAL_MILLIS = 1000;\n\n/**\n * The factor to backoff by.\n * Should be a number greater than 1.\n */\nconst DEFAULT_BACKOFF_FACTOR = 2;\n\n/**\n * The maximum milliseconds to increase to.\n *\n * <p>Visible for testing\n */\nexport const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\n\n/**\n * The percentage of backoff time to randomize by.\n * See\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\n * for context.\n *\n * <p>Visible for testing\n */\nexport const RANDOM_FACTOR = 0.5;\n\n/**\n * Based on the backoff method from\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\n */\nexport function calculateBackoffMillis(\n  backoffCount: number,\n  intervalMillis: number = DEFAULT_INTERVAL_MILLIS,\n  backoffFactor: number = DEFAULT_BACKOFF_FACTOR\n): number {\n  // Calculates an exponentially increasing value.\n  // Deviation: calculates value from count and a constant interval, so we only need to save value\n  // and count to restore state.\n  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n\n  // A random \"fuzz\" to avoid waves of retries.\n  // Deviation: randomFactor is required.\n  const randomWait = Math.round(\n    // A fraction of the backoff value to add/subtract.\n    // Deviation: changes multiplication order to improve readability.\n    RANDOM_FACTOR *\n      currBaseValue *\n      // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n      // if we add or subtract.\n      (Math.random() - 0.5) *\n      2\n  );\n\n  // Limits backoff to max to avoid effectively permanent backoff.\n  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provide English ordinal letters after a number\n */\nexport function ordinal(i: number): string {\n  if (!Number.isFinite(i)) {\n    return `${i}`;\n  }\n  return i + indicator(i);\n}\n\nfunction indicator(i: number): string {\n  i = Math.abs(i);\n  const cent = i % 100;\n  if (cent >= 10 && cent <= 20) {\n    return 'th';\n  }\n  const dec = i % 10;\n  if (dec === 1) {\n    return 'st';\n  }\n  if (dec === 2) {\n    return 'nd';\n  }\n  if (dec === 3) {\n    return 'rd';\n  }\n  return 'th';\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide multiple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide multiple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n", "const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n", "import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as dataconnectName } from '../../../packages/data-connect/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as vertexName } from '../../../packages/vertexai/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [dataconnectName]: 'fire-data-connect',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  [vertexName]: 'fire-vertex',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseServerApp\n} from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * @internal\n */\nexport const _serverApps = new Map<string, FirebaseServerApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  for (const serverApp of _serverApps.values()) {\n    _addComponent(serverApp as FirebaseServerAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\n *\n * @returns true if the provide object is of type FirebaseApp.\n *\n * @internal\n */\nexport function _isFirebaseApp(\n  obj: FirebaseApp | FirebaseOptions\n): obj is FirebaseApp {\n  return (obj as FirebaseApp).options !== undefined;\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\nexport function _isFirebaseServerApp(\n  obj: FirebaseApp | FirebaseServerApp | null | undefined\n): obj is FirebaseServerApp {\n  if (obj === null || obj === undefined) {\n    return false;\n  }\n  return (obj as FirebaseServerApp).settings !== undefined;\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  SERVER_APP_DELETED = 'server-app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete',\n  FINALIZATION_REGISTRY_NOT_SUPPORTED = 'finalization-registry-not-supported',\n  INVALID_SERVER_APP_ENVIRONMENT = 'invalid-server-app-environment'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call initializeApp() first',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}'\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.SERVER_APP_DELETED]: 'Firebase Server App has been deleted',\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]:\n    'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\n  [AppError.INVALID_SERVER_APP_ENVIRONMENT]:\n    'FirebaseServerApp is not for use in browser environments.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]: { appName?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  protected readonly _options: FirebaseOptions;\n  protected readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  protected _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAppSettings,\n  FirebaseServerApp,\n  FirebaseServerAppSettings,\n  FirebaseOptions\n} from './public-types';\nimport { deleteApp, registerVersion } from './api';\nimport { ComponentContainer } from '@firebase/component';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport { name as packageName, version } from '../package.json';\nimport { base64Decode } from '@firebase/util';\n\n// Parse the token and check to see if the `exp` claim is in the future.\n// Reports an error to the console if the token or claim could not be parsed, or if `exp` is in\n// the past.\nfunction validateTokenTTL(base64Token: string, tokenName: string): void {\n  const secondPart = base64Decode(base64Token.split('.')[1]);\n  if (secondPart === null) {\n    console.error(\n      `FirebaseServerApp ${tokenName} is invalid: second part could not be parsed.`\n    );\n    return;\n  }\n  const expClaim = JSON.parse(secondPart).exp;\n  if (expClaim === undefined) {\n    console.error(\n      `FirebaseServerApp ${tokenName} is invalid: expiration claim could not be parsed`\n    );\n    return;\n  }\n  const exp = JSON.parse(secondPart).exp * 1000;\n  const now = new Date().getTime();\n  const diff = exp - now;\n  if (diff <= 0) {\n    console.error(\n      `FirebaseServerApp ${tokenName} is invalid: the token has expired.`\n    );\n  }\n}\n\nexport class FirebaseServerAppImpl\n  extends FirebaseAppImpl\n  implements FirebaseServerApp\n{\n  private readonly _serverConfig: FirebaseServerAppSettings;\n  private _finalizationRegistry: FinalizationRegistry<object> | null;\n  private _refCount: number;\n\n  constructor(\n    options: FirebaseOptions | FirebaseAppImpl,\n    serverConfig: FirebaseServerAppSettings,\n    name: string,\n    container: ComponentContainer\n  ) {\n    // Build configuration parameters for the FirebaseAppImpl base class.\n    const automaticDataCollectionEnabled =\n      serverConfig.automaticDataCollectionEnabled !== undefined\n        ? serverConfig.automaticDataCollectionEnabled\n        : false;\n\n    // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\n    const config: Required<FirebaseAppSettings> = {\n      name,\n      automaticDataCollectionEnabled\n    };\n\n    if ((options as FirebaseOptions).apiKey !== undefined) {\n      // Construct the parent FirebaseAppImp object.\n      super(options as FirebaseOptions, config, container);\n    } else {\n      const appImpl: FirebaseAppImpl = options as FirebaseAppImpl;\n      super(appImpl.options, config, container);\n    }\n\n    // Now construct the data for the FirebaseServerAppImpl.\n    this._serverConfig = {\n      automaticDataCollectionEnabled,\n      ...serverConfig\n    };\n\n    // Ensure that the current time is within the `authIdtoken` window of validity.\n    if (this._serverConfig.authIdToken) {\n      validateTokenTTL(this._serverConfig.authIdToken, 'authIdToken');\n    }\n\n    // Ensure that the current time is within the `appCheckToken` window of validity.\n    if (this._serverConfig.appCheckToken) {\n      validateTokenTTL(this._serverConfig.appCheckToken, 'appCheckToken');\n    }\n\n    this._finalizationRegistry = null;\n    if (typeof FinalizationRegistry !== 'undefined') {\n      this._finalizationRegistry = new FinalizationRegistry(() => {\n        this.automaticCleanup();\n      });\n    }\n\n    this._refCount = 0;\n    this.incRefCount(this._serverConfig.releaseOnDeref);\n\n    // Do not retain a hard reference to the dref object, otherwise the FinalizationRegistry\n    // will never trigger.\n    this._serverConfig.releaseOnDeref = undefined;\n    serverConfig.releaseOnDeref = undefined;\n\n    registerVersion(packageName, version, 'serverapp');\n  }\n\n  toJSON(): undefined {\n    return undefined;\n  }\n\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  // Increment the reference count of this server app. If an object is provided, register it\n  // with the finalization registry.\n  incRefCount(obj: object | undefined): void {\n    if (this.isDeleted) {\n      return;\n    }\n    this._refCount++;\n    if (obj !== undefined && this._finalizationRegistry !== null) {\n      this._finalizationRegistry.register(obj, this);\n    }\n  }\n\n  // Decrement the reference count.\n  decRefCount(): number {\n    if (this.isDeleted) {\n      return 0;\n    }\n    return --this._refCount;\n  }\n\n  // Invoked by the FinalizationRegistry callback to note that this app should go through its\n  // reference counts and delete itself if no reference count remain. The coordinating logic that\n  // handles this is in deleteApp(...).\n  private automaticCleanup(): void {\n    void deleteApp(this);\n  }\n\n  get settings(): FirebaseServerAppSettings {\n    this.checkDestroyed();\n    return this._serverConfig;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.SERVER_APP_DELETED);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseServerApp,\n  FirebaseOptions,\n  FirebaseAppSettings,\n  FirebaseServerAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\nimport {\n  _apps,\n  _components,\n  _isFirebaseApp,\n  _registerComponent,\n  _serverApps\n} from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport {\n  deepEqual,\n  getDefaultAppConfig,\n  isBrowser,\n  isWebWorker\n} from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseServerApp} instance.\n *\n * The `FirebaseServerApp` is similar to `FirebaseApp`, but is intended for execution in\n * server side rendering environments only. Initialization will fail if invoked from a\n * browser environment.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize an instance of `FirebaseServerApp`.\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeServerApp({\n *     apiKey: \"AIza....\",                             // Auth / General Use\n *     authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *     databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *     storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *     messagingSenderId: \"123456789\"                  // Cloud Messaging\n *   },\n *   {\n *    authIdToken: \"Your Auth ID Token\"\n *   });\n * ```\n *\n * @param options - `Firebase.AppOptions` to configure the app's services, or a\n *   a `FirebaseApp` instance which contains the `AppOptions` within.\n * @param config - `FirebaseServerApp` configuration.\n *\n * @returns The initialized `FirebaseServerApp`.\n *\n * @public\n */\nexport function initializeServerApp(\n  options: FirebaseOptions | FirebaseApp,\n  config: FirebaseServerAppSettings\n): FirebaseServerApp;\n\nexport function initializeServerApp(\n  _options: FirebaseOptions | FirebaseApp,\n  _serverAppConfig: FirebaseServerAppSettings\n): FirebaseServerApp {\n  if (isBrowser() && !isWebWorker()) {\n    // FirebaseServerApp isn't designed to be run in browsers.\n    throw ERROR_FACTORY.create(AppError.INVALID_SERVER_APP_ENVIRONMENT);\n  }\n\n  if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\n    _serverAppConfig.automaticDataCollectionEnabled = false;\n  }\n\n  let appOptions: FirebaseOptions;\n  if (_isFirebaseApp(_options)) {\n    appOptions = _options.options;\n  } else {\n    appOptions = _options;\n  }\n\n  // Build an app name based on a hash of the configuration options.\n  const nameObj = {\n    ..._serverAppConfig,\n    ...appOptions\n  };\n\n  // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n  // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n  if (nameObj.releaseOnDeref !== undefined) {\n    delete nameObj.releaseOnDeref;\n  }\n\n  const hashCode = (s: string): number => {\n    return [...s].reduce(\n      (hash, c) => (Math.imul(31, hash) + c.charCodeAt(0)) | 0,\n      0\n    );\n  };\n\n  if (_serverAppConfig.releaseOnDeref !== undefined) {\n    if (typeof FinalizationRegistry === 'undefined') {\n      throw ERROR_FACTORY.create(\n        AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED,\n        {}\n      );\n    }\n  }\n\n  const nameString = '' + hashCode(JSON.stringify(nameObj));\n  const existingApp = _serverApps.get(nameString) as FirebaseServerApp;\n  if (existingApp) {\n    (existingApp as FirebaseServerAppImpl).incRefCount(\n      _serverAppConfig.releaseOnDeref\n    );\n    return existingApp;\n  }\n\n  const container = new ComponentContainer(nameString);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseServerAppImpl(\n    appOptions,\n    _serverAppConfig,\n    nameString,\n    container\n  );\n\n  _serverApps.set(nameString, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  let cleanupProviders = false;\n  const name = app.name;\n  if (_apps.has(name)) {\n    cleanupProviders = true;\n    _apps.delete(name);\n  } else if (_serverApps.has(name)) {\n    const firebaseServerApp = app as FirebaseServerAppImpl;\n    if (firebaseServerApp.decRefCount() <= 0) {\n      _serverApps.delete(name);\n      cleanupProviders = true;\n    }\n  }\n\n  if (cleanupProviders) {\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME);\n    const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\n    // We already have the value but tx.done can throw,\n    // so we need to await it here to catch errors\n    await tx.done;\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\nimport { logger } from './logger';\n\nconst MAX_HEADER_BYTES = 1024;\nexport const MAX_NUM_STORED_HEARTBEATS = 30;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (heartbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    try {\n      const platformLogger = this.container\n        .getProvider('platform-logger')\n        .getImmediate();\n\n      // This is the \"Firebase user agent\" string from the platform logger\n      // service, not the browser user agent.\n      const agent = platformLogger.getPlatformInfoString();\n      const date = getUTCDateString();\n      if (this._heartbeatsCache?.heartbeats == null) {\n        this._heartbeatsCache = await this._heartbeatsCachePromise;\n        // If we failed to construct a heartbeats cache, then return immediately.\n        if (this._heartbeatsCache?.heartbeats == null) {\n          return;\n        }\n      }\n      // Do not store a heartbeat if one is already stored for this day\n      // or if a header has already been sent today.\n      if (\n        this._heartbeatsCache.lastSentHeartbeatDate === date ||\n        this._heartbeatsCache.heartbeats.some(\n          singleDateHeartbeat => singleDateHeartbeat.date === date\n        )\n      ) {\n        return;\n      } else {\n        // There is no entry for this date. Create one.\n        this._heartbeatsCache.heartbeats.push({ date, agent });\n\n        // If the number of stored heartbeats exceeds the maximum number of stored heartbeats, remove the heartbeat with the earliest date.\n        // Since this is executed each time a heartbeat is pushed, the limit can only be exceeded by one, so only one needs to be removed.\n        if (\n          this._heartbeatsCache.heartbeats.length > MAX_NUM_STORED_HEARTBEATS\n        ) {\n          const earliestHeartbeatIdx = getEarliestHeartbeatIdx(\n            this._heartbeatsCache.heartbeats\n          );\n          this._heartbeatsCache.heartbeats.splice(earliestHeartbeatIdx, 1);\n        }\n      }\n\n      return this._storage.overwrite(this._heartbeatsCache);\n    } catch (e) {\n      logger.warn(e);\n    }\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    try {\n      if (this._heartbeatsCache === null) {\n        await this._heartbeatsCachePromise;\n      }\n      // If it's still null or the array is empty, there is no data to send.\n      if (\n        this._heartbeatsCache?.heartbeats == null ||\n        this._heartbeatsCache.heartbeats.length === 0\n      ) {\n        return '';\n      }\n      const date = getUTCDateString();\n      // Extract as many heartbeats from the cache as will fit under the size limit.\n      const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n        this._heartbeatsCache.heartbeats\n      );\n      const headerString = base64urlEncodeWithoutPadding(\n        JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n      );\n      // Store last sent date to prevent another being logged/sent for the same day.\n      this._heartbeatsCache.lastSentHeartbeatDate = date;\n      if (unsentEntries.length > 0) {\n        // Store any unsent entries if they exist.\n        this._heartbeatsCache.heartbeats = unsentEntries;\n        // This seems more likely than emptying the array (below) to lead to some odd state\n        // since the cache isn't empty and this will be called again on the next request,\n        // and is probably safest if we await it.\n        await this._storage.overwrite(this._heartbeatsCache);\n      } else {\n        this._heartbeatsCache.heartbeats = [];\n        // Do not wait for this, to reduce latency.\n        void this._storage.overwrite(this._heartbeatsCache);\n      }\n      return headerString;\n    } catch (e) {\n      logger.warn(e);\n      return '';\n    }\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      if (idbHeartbeatObject?.heartbeats) {\n        return idbHeartbeatObject;\n      } else {\n        return { heartbeats: [] };\n      }\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n\n/**\n * Returns the index of the heartbeat with the earliest date.\n * If the heartbeats array is empty, -1 is returned.\n */\nexport function getEarliestHeartbeatIdx(\n  heartbeats: SingleDateHeartbeat[]\n): number {\n  if (heartbeats.length === 0) {\n    return -1;\n  }\n\n  let earliestHeartbeatIdx = 0;\n  let earliestHeartbeatDate = heartbeats[0].date;\n\n  for (let i = 1; i < heartbeats.length; i++) {\n    if (heartbeats[i].date < earliestHeartbeatDate) {\n      earliestHeartbeatDate = heartbeats[i].date;\n      earliestHeartbeatIdx = i;\n    }\n  }\n\n  return earliestHeartbeatIdx;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n", "/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a JavaScript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in keys, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _isFirebaseServerApp } from '@firebase/app'; // eslint-disable-line import/no-extraneous-dependencies\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  private serverAppAppCheckToken?: string;\n  private appName: string;\n  constructor(\n    app: FirebaseApp,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appName = app.name;\n    if (_isFirebaseServerApp(app) && app.settings.appCheckToken) {\n      this.serverAppAppCheckToken = app.settings.appCheckToken;\n    }\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (this.serverAppAppCheckToken) {\n      if (forceRefresh) {\n        throw new Error(\n          'Attempted reuse of `FirebaseServerApp.appCheckToken` after previous usage failed.'\n        );\n      }\n      return Promise.resolve({ token: this.serverAppAppCheckToken });\n    }\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false,\n    public readonly isUsingEmulator: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are received from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = {\n          ...(payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          })\n        };\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt = Math.max(\n        0,\n        new Date().getTime() - this.lastConnectionAttemptTime_\n      );\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap will be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whether the tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexicographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `IteratedDataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: IteratedDataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n * Represents a child snapshot of a `Reference` that is being iterated over. The key will never be undefined.\n */\nexport interface IteratedDataSnapshot extends DataSnapshot {\n  key: string; // key of the location of this snapshot.\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thenablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thenablePushRef.then = promise.then.bind(promise);\n  thenablePushRef.catch = promise.then.bind(promise, undefined);\n  return thenablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type = 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type = 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type = 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type = 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type = 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type = 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type = 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type = 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type = 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type = 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type = 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams,\n    /*isUsingEmulator=*/ true\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated with the provided\n * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if\n * no instance exists or if the existing instance uses a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAppCheckInternal,\n  AppCheckInternalComponentName\n} from '@firebase/app-check-interop-types';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  Provider\n} from '@firebase/component';\n\nimport { repoManagerDatabaseFromApp } from '../api/Database';\nimport { Database } from '../api.standalone';\nimport { setSDKVersion } from '../core/version';\n\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n * @internal\n * @param app - A valid FirebaseApp-like object\n * @param url - A valid Firebase databaseURL\n * @param version - custom version e.g. firebase-admin version\n * @param customAppCheckImpl - custom app check implementation\n * @param customAuthImpl - custom auth implementation\n */\nexport function _initStandalone({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  customAppCheckImpl,\n  nodeAdmin = false\n}: {\n  app: FirebaseApp;\n  url: string;\n  version: string;\n  customAuthImpl: FirebaseAuthInternal;\n  customAppCheckImpl?: FirebaseAppCheckInternal;\n  nodeAdmin?: boolean;\n}): Database {\n  setSDKVersion(version);\n\n  /**\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n   * any actual function.\n   */\n  const componentContainer = new ComponentContainer('database-standalone');\n  const authProvider = new Provider<FirebaseAuthInternalName>(\n    'auth-internal',\n    componentContainer\n  );\n  let appCheckProvider: Provider<AppCheckInternalComponentName>;\n  if (customAppCheckImpl) {\n    appCheckProvider = new Provider<AppCheckInternalComponentName>(\n      'app-check-internal',\n      componentContainer\n    );\n    appCheckProvider.setComponent(\n      new Component(\n        'app-check-internal',\n        () => customAppCheckImpl,\n        ComponentType.PRIVATE\n      )\n    );\n  }\n  authProvider.setComponent(\n    new Component('auth-internal', () => customAuthImpl, ComponentType.PRIVATE)\n  );\n\n  return repoManagerDatabaseFromApp(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    nodeAdmin\n  );\n}\n", "/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n", "// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getDatabase } from 'firebase/database';\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyA1SSSR2NZrAWa0C72G-XiuiM8htM52Vy4',\r\n  authDomain: 'oakley-spirits.firebaseapp.com',\r\n  databaseURL: 'https://oakley-spirits-default-rtdb.firebaseio.com',\r\n  projectId: 'oakley-spirits',\r\n  storageBucket: 'oakley-spirits.firebasestorage.app',\r\n  messagingSenderId: '961642258767',\r\n  appId: '1:961642258767:web:921dbc51a2b8eac3d4253a',\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Initialize Realtime Database\r\nexport const db = getDatabase(app);\r\n", "// eslint-disable-next-line simple-import-sort/imports\r\nimport { db } from './firebaseConfig';\r\nimport { ref, get } from 'firebase/database';\r\n\r\n/**\r\n * Fetches all raffle entries from Firebase (GET request equivalent)\r\n */\r\nexport const getRaffleEntries = async () => {\r\n  const entriesRef = ref(db, 'raffleEntries');\r\n  const snapshot = await get(entriesRef);\r\n\r\n  if (!snapshot.exists()) {\r\n    console.log('No raffle entries found.');\r\n    return [];\r\n  }\r\n\r\n  const entries = snapshot.val();\r\n  // console.log('Raffle Entries:', entries);\r\n\r\n  return Object.entries(entries).map(([email, data]) => ({\r\n    email,\r\n    ...(data as { name: string; timestamp: number }),\r\n  }));\r\n};\r\n", "// eslint-disable-next-line simple-import-sort/imports\r\nimport { db } from './firebaseConfig';\r\nimport { ref, set, get, push } from 'firebase/database';\r\n\r\n/**\r\n * Adds a new raffle entry to Firebase (POST request equivalent)\r\n * Generates a unique ID to avoid conflicts\r\n * @param email - The participant's email\r\n * @param name - The participant's name\r\n */\r\nexport const postRaffleEntry = async (email: string, name: string) => {\r\n  const entriesRef = ref(db, 'raffleEntries');\r\n\r\n  // Check if the email is already registered\r\n  const snapshot = await get(entriesRef);\r\n  if (snapshot.exists()) {\r\n    const existingEntries = snapshot.val();\r\n    for (const entryId in existingEntries) {\r\n      if (existingEntries[entryId].email === email) {\r\n        console.log(`Email ${email} is already registered.`);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Push a new entry with a unique ID\r\n  const newEntryRef = push(entriesRef);\r\n  await set(newEntryRef, {\r\n    name,\r\n    email,\r\n    timestamp: Date.now(),\r\n  });\r\n\r\n  console.log(`Successfully added ${name} (${email}) to the raffle.`);\r\n};\r\n", "import { getRaffleEntries } from './getEntries';\r\nimport { postRaffleEntry } from './postEntries';\r\n\r\n// Test adding an entry\r\n(async () => {\r\n  await postRaffleEntry('Richwoods72@gmail.com', 'Marcus  Woods');\r\n  await postRaffleEntry('tim6oslice@gmail.com', 'Tim Hudson');\r\n  await postRaffleEntry('cwmart7@gmail.com', 'Cody Martin');\r\n  await postRaffleEntry('Troy.sheldon@outlook.com', 'Troy Davis');\r\n  await postRaffleEntry('wdbrow03@gmail.com', 'Welsey Brown');\r\n  await postRaffleEntry('Ed@eccindustries.com', 'Ed Salameh');\r\n  await postRaffleEntry('dawightboy2@yahoo.com', 'Dwight Young');\r\n  await postRaffleEntry('Neal.donhoff@gmail.com', 'Neal Donhoff');\r\n\r\n  // Test fetching all entries\r\n  const entries = await getRaffleEntries();\r\n  console.log(entries);\r\n})();\r\n"],
  "mappings": "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",
  "names": ["stringToByteArray", "error", "error", "error", "name", "LogLevel", "name", "error", "name", "version", "db", "target", "DEFAULT_ENTRY_NAME", "appName", "appCompatName", "analyticsName", "analyticsCompatName", "appCheckName", "appCheckCompatName", "authName", "authCompatName", "databaseName", "dataconnectName", "databaseCompatName", "functionsName", "functionsCompatName", "installationsName", "installationsCompatName", "messagingName", "messagingCompatName", "performanceName", "performanceCompatName", "remoteConfigName", "remoteConfigCompatName", "storageName", "storageCompatName", "firestoreName", "firestoreCompatName", "vertexName", "packageName", "app", "app", "name", "name", "DEFAULT_ENTRY_NAME", "name", "DEFAULT_ENTRY_NAME", "app", "version", "db", "app", "name", "version", "name", "version", "SDK_VERSION", "version", "name", "sha1", "logger", "enableLogging", "error", "app", "child", "get", "error", "map", "SDK_VERSION", "name", "MAX_NODE", "setMaxNode", "nodeFromJSON", "base12", "root", "setPriorityMaxNode", "self", "error", "child", "OperationType", "child", "newWriteTree", "child", "newViewCache", "name", "referenceConstructor", "query", "serverCache", "error", "view", "child", "name", "isValidKey", "errorPrefixFxn", "errorPrefix", "isValidKey", "errorPrefixFxn", "isValidKey", "logger", "error", "child", "ref", "error", "ref", "db", "name", "ref", "error", "app", "app", "app", "db", "SDK_VERSION", "app", "name", "version", "name"]
}
